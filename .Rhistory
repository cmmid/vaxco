base.dt <- plot.dt[is.na(vax_mech), .SD, .SDcols = -c("vax_mech", "eff_mech", "from_age", "id")]
dcp <- copy(base.dt[outcome == "death_o"])
dcp[, outcome := "death_o.1"][, value := 0.0 ]
base.dt <- rbind(base.dt, dcp)
res.dt <- plot.dt[!is.na(vax_mech)][base.dt, on=.(sampleId, group, t, outcome)][, .(
value = sum(value), i.value = sum(i.value), averted = sum(i.value-value)
), by=c(setdiff(names(plot.dt), c("value","group")))]
res.dt[order(t), c("cv","cv.i","ca") := .(cumsum(value), cumsum(i.value), cumsum(averted)), by=.(sampleId, id, outcome)]
require(ggplot2)
ggplot(res.dt[outcome %in% c("death_o.1","death_o")]) +
aes(t, ca, color = vax_mech, linetype = eff_mech, group = interaction(vax_mech, eff_mech, sampleId, outcome, from_age)) +
facet_grid(outcome ~ from_age, scales = "free_y") +
geom_line(alpha = 0.2) +
theme_minimal() +
scale_color_discrete(guide = guide_legend(override.aes = list(alpha = 1))) +
scale_linetype_discrete(guide = guide_legend(override.aes = list(alpha = 1))) +
scale_y_log10() + coord_cartesian(ylim = c(1e3, NA))
res.dt
ggplot(res.dt[outcome %in% c("death_o.1","death_o")]) +
aes(t, ca, color = vax_mech, linetype = eff_mech, group = interaction(vax_mech, eff_mech, sampleId, outcome, from_age)) +
facet_grid(outcome ~ from_age, scales = "free_y") +
geom_line(alpha = 0.2) +
theme_minimal() +
scale_color_discrete(guide = guide_legend(override.aes = list(alpha = 1))) +
scale_linetype_discrete(guide = guide_legend(override.aes = list(alpha = 1)))
res.dt[eff_mech == "leaky"]
res.dt[eff_mech == "leaky" & averted < 0]
res.dt[eff_mech == "leaky" & averted < 0 & outcome != Sv]
res.dt[eff_mech == "leaky" & averted < 0 & outcome != "Sv"]
res.dt[eff_mech == "leaky" & averted < 0 & !(outcome %in% c("Sv","Ev"))]
res.dt[eff_mech == "leaky" & averted < 0 & !(outcome %in% c("Sv","Ev")), unique(outcome)]
res.dt[eff_mech == "leaky" & averted < 0 & !(outcome %in% c("Sv","Ev")), .SD[which.max(averted < 0)], by=.(id, sampleId)]
ggplot(res.dt[!(outcome %in% c("Ev","Sv"))]) +
aes(t, ca, color = vax_mech, linetype = eff_mech, group = interaction(vax_mech, eff_mech, sampleId, outcome, from_age)) +
facet_grid(outcome ~ from_age, scales = "free_y") +
geom_line(alpha = 0.2) +
theme_minimal() +
scale_color_discrete(guide = guide_legend(override.aes = list(alpha = 1))) +
scale_linetype_discrete(guide = guide_legend(override.aes = list(alpha = 1)))
ggplot(res.dt[(outcome %in% c("Ev","Sv"))]) +
aes(t, ca, color = vax_mech, linetype = eff_mech, group = interaction(vax_mech, eff_mech, sampleId, outcome, from_age)) +
facet_grid(outcome ~ from_age, scales = "free_y") +
geom_line(alpha = 0.2) +
theme_minimal() +
scale_color_discrete(guide = guide_legend(override.aes = list(alpha = 1))) +
scale_linetype_discrete(guide = guide_legend(override.aes = list(alpha = 1)))
ggplot(res.dt[!(outcome %in% c("Ev","Sv"))]) +
aes(t, ca, color = vax_mech, linetype = eff_mech, group = interaction(vax_mech, eff_mech, sampleId, outcome, from_age)) +
facet_grid(outcome ~ from_age, scales = "free_y") +
geom_line(alpha = 0.2) +
theme_minimal() +
scale_color_discrete(guide = guide_legend(override.aes = list(alpha = 1))) +
scale_linetype_discrete(guide = guide_legend(override.aes = list(alpha = 1)))
res.dt[eff_mech == "leaky" & outcome == "Ev"][,.SD[which.max(value > 0),]]
res.dt[eff_mech == "leaky" & outcome == "Ev"][,.SD[which.max(value > 0),], by=.(id, sampleId)]
ggplot(res.dt[!(outcome %in% c("Ev","Sv"))][t > t_vax]) +
aes(t, ca, color = vax_mech, linetype = eff_mech, group = interaction(vax_mech, eff_mech, sampleId, outcome, from_age)) +
facet_grid(outcome ~ from_age, scales = "free_y") +
geom_line(alpha = 0.2) +
theme_minimal() +
scale_color_discrete(guide = guide_legend(override.aes = list(alpha = 1))) +
scale_linetype_discrete(guide = guide_legend(override.aes = list(alpha = 1)))
ggplot(res.dt[!(outcome %in% c("Ev","Sv"))][t > t_vax]) +
aes(t, value, color = vax_mech, linetype = eff_mech, group = interaction(vax_mech, eff_mech, sampleId, outcome, from_age)) +
facet_grid(outcome ~ from_age, scales = "free_y") +
geom_line(alpha = 0.2) +
theme_minimal() +
scale_color_discrete(guide = guide_legend(override.aes = list(alpha = 1))) +
scale_linetype_discrete(guide = guide_legend(override.aes = list(alpha = 1)))
ggplot(res.dt[!(outcome %in% c("Ev","Sv"))]) +
aes(t, value, color = vax_mech, linetype = eff_mech, group = interaction(vax_mech, eff_mech, sampleId, outcome, from_age)) +
facet_grid(outcome ~ from_age, scales = "free_y") +
geom_line(alpha = 0.2) +
theme_minimal() +
scale_color_discrete(guide = guide_legend(override.aes = list(alpha = 1))) +
scale_linetype_discrete(guide = guide_legend(override.aes = list(alpha = 1)))
res <- rbindlist(lapply(list.files("test", full.names = T), function(p) readRDS(p)[, id := as.integer(gsub("^.+/(\\d+)\\.rds$","\\1",p))]))
res[, unique(outcome)]
scn <- readRDS("~/Dropbox/Covid-WHO-vax/inputs/config.rds")[id %in% res$id]
plot.dt <- res[scn, on=.(id)][, .(sampleId, group, t, outcome, value, id, vax_mech, eff_mech, from_age)]
base.dt <- plot.dt[is.na(vax_mech), .SD, .SDcols = -c("vax_mech", "eff_mech", "from_age", "id")]
dcp <- copy(base.dt[outcome == "death_o"])
dcp[, outcome := "death_o.1"][, value := 0.0 ]
base.dt <- rbind(base.dt, dcp)
res.dt <- plot.dt[!is.na(vax_mech)][base.dt, on=.(sampleId, group, t, outcome)][, .(
value = sum(value), i.value = sum(i.value), averted = sum(i.value-value)
), by=c(setdiff(names(plot.dt), c("value","group")))]
res.dt[order(t), c("cv","cv.i","ca") := .(cumsum(value), cumsum(i.value), cumsum(averted)), by=.(sampleId, id, outcome)]
require(ggplot2)
ggplot(res.dt[!(outcome %in% c("Ev","Sv"))]) +
aes(t, value, color = vax_mech, linetype = eff_mech, group = interaction(vax_mech, eff_mech, sampleId, outcome, from_age)) +
facet_grid(outcome ~ from_age, scales = "free_y") +
geom_line(alpha = 0.2) +
theme_minimal() +
scale_color_discrete(guide = guide_legend(override.aes = list(alpha = 1))) +
scale_linetype_discrete(guide = guide_legend(override.aes = list(alpha = 1)))
res <- rbindlist(lapply(list.files("test", full.names = T), function(p) readRDS(p)[, id := as.integer(gsub("^.+/(\\d+)\\.rds$","\\1",p))]))
res[,unique(outcome)]
res[outcome == "death_o.1"]
res <- rbindlist(lapply(list.files("test", full.names = T), function(p) readRDS(p)[, id := as.integer(gsub("^.+/(\\d+)\\.rds$","\\1",p))]))
res[,unique(outcome)]
scn <- readRDS("~/Dropbox/Covid-WHO-vax/inputs/config.rds")[id %in% res$id]
plot.dt <- res[scn, on=.(id)][, .(sampleId, group, t, outcome, value, id, vax_mech, eff_mech, from_age)]
base.dt <- plot.dt[is.na(vax_mech), .SD, .SDcols = -c("vax_mech", "eff_mech", "from_age", "id")]
dcp <- copy(base.dt[outcome == "death_o"])
dcp[, outcome := "death_o.1"][, value := 0.0 ]
base.dt <- rbind(base.dt, dcp)
res.dt <- plot.dt[!is.na(vax_mech)][base.dt, on=.(sampleId, group, t, outcome)][, .(
value = sum(value), i.value = sum(i.value), averted = sum(i.value-value)
), by=c(setdiff(names(plot.dt), c("value","group")))]
res.dt[order(t), c("cv","cv.i","ca") := .(cumsum(value), cumsum(i.value), cumsum(averted)), by=.(sampleId, id, outcome)]
ggplot(res.dt[!(outcome %in% c("Ev","Sv"))]) +
aes(t, value, color = vax_mech, linetype = eff_mech, group = interaction(vax_mech, eff_mech, sampleId, outcome, from_age)) +
facet_grid(outcome ~ from_age, scales = "free_y") +
geom_line(alpha = 0.2) +
theme_minimal() +
scale_color_discrete(guide = guide_legend(override.aes = list(alpha = 1))) +
scale_linetype_discrete(guide = guide_legend(override.aes = list(alpha = 1)))
suppressPackageStartupMessages({
require(data.table)
require(qs)
})
.debug <- c("~/Dropbox/Covid-WHO-vax", "3794")
.args <- if (interactive()) sprintf(c(
"fitd_combined.qs", "epi_data.csv", "mob_data.csv",
"%s/inputs/config.rds", .debug[2], "covidm", "%s/outputs/sim/%s.rds"
), .debug[1], .debug[2]) else commandArgs(trailingOnly = TRUE)
# load epi & mobility data
epi = fread(.args[2])
mob = fread(.args[3])
# TODO fish out scenario
scndb <- .args[4]
scnid <- as.integer(tail(.args, 3)[1])
cm_path <- tail(.args, 2)[1]
outfile <- tail(.args, 1)
# Scenario parameters
# TODO what this does not cover yet: any vaccines being disbursed
# (how many doses to which age groups, when)
scen.dt <- as.list(readRDS(scndb)[id == scnid])
scen.dt$n_samples <- 5
#' @example
#' scen.dt$n_samples <- 5
#' TODO pull from pars table?
#' also, need to set selections from covidm sampling
natwaning_key <- sprintf("%.1f", scen.dt$nat_imm_dur_days/365)
# load fitted model for Sindh, match to scenario waning assumption
fitS = qread(.args[1])[[natwaning_key]]
# load covidm - this will update user_defined.cpp, but not user_defined.o
cm_force_rebuild = F;
cm_build_verbose = F;
cm_force_shared = T;
cm_version = 2;
source(file.path(cm_path, "R", "covidm.R"))
date_vax <- as.Date(scen.dt$start_timing, origin = "1970-01-01")
t_vax <- as.numeric(date_vax - as.Date(fitS$par$date0))
fitS$par <- cm_check_parameters(cm_translate_parameters(fitS$par))
deathp <- fitS$par$processes[[1]]
deathp$source <- "Ev"
hospp <- fitS$par$processes[[2]]
hospp$source <- "Ev"
#' first 3 years + vax anniversaries
# validation_times <- seq(7, 365*3, by=7)
anni_times <- seq(t_vax, by=365, length.out = scen.dt$horizon+1) #' horizon years + 1
record_times <- 0:(t_vax+365) # anni_times #unique(c(validation_times, anni_times))
mk_waning <- function(baseline_dur_days, ages = 16, age_dur_mods = rep(1, ages) ) {
rep(
ifelse(baseline_dur_days == 0, 0, 1/baseline_dur_days),
ages
) / age_dur_mods
}
fitS$par$time1 = t_vax + max(record_times) # 10 years of anniversaries
# TODO need fitting w/ the different immunity waning?
fitS$par$pop[[1]]$wn = mk_waning(scen.dt$nat_imm_dur_days)
fitS$par$processes
fitS$par$processes[c(1,2)]
class(fitS$par$processes[c(1,2)])
class(fitS$par$processes[-c(1,2)])
fitS$par$processes[-c(1,2)]
suppressPackageStartupMessages({
require(data.table)
require(qs)
})
.debug <- c("~/Dropbox/Covid-WHO-vax", "3794")
.args <- if (interactive()) sprintf(c(
"fitd_combined.qs", "epi_data.csv", "mob_data.csv",
"%s/inputs/config.rds", .debug[2], "covidm", "%s/outputs/sim/%s.rds"
), .debug[1], .debug[2]) else commandArgs(trailingOnly = TRUE)
# load epi & mobility data
epi = fread(.args[2])
mob = fread(.args[3])
# TODO fish out scenario
scndb <- .args[4]
scnid <- as.integer(tail(.args, 3)[1])
cm_path <- tail(.args, 2)[1]
outfile <- tail(.args, 1)
# Scenario parameters
# TODO what this does not cover yet: any vaccines being disbursed
# (how many doses to which age groups, when)
scen.dt <- as.list(readRDS(scndb)[id == scnid])
scen.dt$n_samples <- 5
scen.dt
suppressPackageStartupMessages({
require(data.table)
require(qs)
})
.debug <- c("~/Dropbox/Covid-WHO-vax", "3794")
.args <- if (interactive()) sprintf(c(
"fitd_combined.qs", "epi_data.csv", "mob_data.csv",
"%s/inputs/config.rds", .debug[2], "covidm", "%s/outputs/sim/%s.rds"
), .debug[1], .debug[2]) else commandArgs(trailingOnly = TRUE)
# load epi & mobility data
epi = fread(.args[2])
mob = fread(.args[3])
# TODO fish out scenario
scndb <- .args[4]
scnid <- as.integer(tail(.args, 3)[1])
cm_path <- tail(.args, 2)[1]
outfile <- tail(.args, 1)
# Scenario parameters
# TODO what this does not cover yet: any vaccines being disbursed
# (how many doses to which age groups, when)
scen.dt <- as.list(readRDS(scndb)[id == scnid])
scen.dt$n_samples <- 5
#' @example
#' scen.dt$n_samples <- 5
#' TODO pull from pars table?
#' also, need to set selections from covidm sampling
natwaning_key <- sprintf("%.1f", scen.dt$nat_imm_dur_days/365)
# load fitted model for Sindh, match to scenario waning assumption
fitS = qread(.args[1])[[natwaning_key]]
# load covidm - this will update user_defined.cpp, but not user_defined.o
cm_force_rebuild = F;
cm_build_verbose = F;
cm_force_shared = T;
cm_version = 2;
source(file.path(cm_path, "R", "covidm.R"))
date_vax <- as.Date(scen.dt$start_timing, origin = "1970-01-01")
t_vax <- as.numeric(date_vax - as.Date(fitS$par$date0))
fitS$par <- cm_check_parameters(cm_translate_parameters(fitS$par))
deathp <- fitS$par$processes[[1]]
deathp$source <- "Ev"
hospp <- fitS$par$processes[[2]]
hospp$source <- "Ev"
#' first 3 years + vax anniversaries
# validation_times <- seq(7, 365*3, by=7)
anni_times <- seq(t_vax, by=365, length.out = scen.dt$horizon+1) #' horizon years + 1
record_times <- 0:(t_vax+365) # anni_times #unique(c(validation_times, anni_times))
mk_waning <- function(baseline_dur_days, ages = 16, age_dur_mods = rep(1, ages) ) {
rep(
ifelse(baseline_dur_days == 0, 0, 1/baseline_dur_days),
ages
) / age_dur_mods
}
fitS$par$time1 = t_vax + max(record_times) # 10 years of anniversaries
# TODO need fitting w/ the different immunity waning?
fitS$par$pop[[1]]$wn = mk_waning(scen.dt$nat_imm_dur_days)
if (scen.dt$strategy == "campaign") {
# set parameters for this set of scenario runs
#'  - infection + allornothing (ve = efficacy, uv = 0)
#'  - infection + leaky (ve = 1, uv = u*(1-eff))
#'  - disease-only + allornothing (ve = efficacy, yv = 0)
#'  - disease-only + leaky (ve = 1, yv = y*(1-eff))
if (scen.dt$eff_mech == "allornothing") {
fitS$par$pop[[1]]$ev = rep(scen.dt$vax_eff, 16) #' TODO mods by age?
if (scen.dt$vax_mech == "infection") {
fitS$par$pop[[1]]$uv = rep(0, 16)
} else { # against disease
fitS$par$pop[[1]]$yv = rep(0, 16)
}
} else {
fitS$par$pop[[1]]$ev = rep(1, 16)
if (scen.dt$vax_mech == "infection") {
fitS$par$pop[[1]]$uv = fitS$par$pop[[1]]$u*rep(1-scen.dt$vax_eff, 16) #' TODO mods by age?
# can still end up in Ev => if in Ev, proceed as normal to diseased outcomes
fitS$par$processes <- c(fitS$par$processes[c(1,2)], list(deathp, hospp), fitS$par$processes[-c(1,2)])
} else { # against disease
fitS$par$pop[[1]]$yv = fitS$par$pop[[1]]$y*rep(1-scen.dt$vax_eff, 16)
# can still end up with bad outcomes, but reduced probability
deathp$prob[1,] <- deathp$prob[1,]*rep(1-scen.dt$vax_eff, 16)
deathp$prob[2,] <- 1 - deathp$prob[1,]
hospp$prob[1:3, ] <- hospp$prob[1:3, ]*rep(1-scen.dt$vax_eff, 16)
hospp$prob[4, ] <- 1 - colSums(hospp$prob[1:3, ])
fitS$par$processes <- c(fitS$par$processes[c(1,2)], list(deathp, hospp), fitS$par$processes[-c(1,2)])
}
}
fitS$par$pop[[1]]$wv = mk_waning(scen.dt$vax_imm_dur_days)
doses_per_day <- rep(0, 16)
tar_ages <- scen.dt$from_age:scen.dt$to_age
#' demographic proportions for target ages
vp <- fitS$par$pop[[1]]$size[tar_ages];
vp <- vp/sum(vp)
doses_per_day[tar_ages] <- floor(vp*scen.dt$doses_per_day)
del <- scen.dt$doses_per_day - sum(doses_per_day)
if (del) {
del_tar <- scen.dt$from_age:(scen.dt$from_age+del-1)
doses_per_day[del_tar] <- doses_per_day[del_tar] + 1
}
#' if from_age != 4 (i.e., not doing whole population initially)
doses_per_day_later <- rep(0, 16)
tar_ages <- 4:scen.dt$to_age
vp <- fitS$par$pop[[1]]$size[tar_ages]; vp <- vp/sum(vp)
#' TODO potentially make demographic sensitive?
doses_per_day_later[tar_ages] <- floor(vp*scen.dt$doses_per_day)
del <- scen.dt$doses_per_day - sum(doses_per_day_later)
if (del) {
del_tar <- 4:(4+del-1)
doses_per_day_later[del_tar] <- doses_per_day_later[del_tar] + 1
}
t_end <- ifelse(scen.dt$strategy_str == 0, fitS$par$time1, t_vax+scen.dt$strategy_str)
#' for this particular population, at the lowest dose rate, it takes
#' two quarters to get to high coverage; otherwise,
#' after the expansion of doses per day in second Q, they will be
#' covered during that period. Rather than select an exact day, for that change
#' we assume coverage targetting switches with increased availability.
#'
#' The other time to consider changing targets is for continuous dosages
if (scen.dt$increasing) {
covaxIncreaseMult <- c(4, 6, 8)
covaxIncreaseDays <- t_vax + seq(91, by=91, length.out = length(covaxIncreaseMult))
dpd <- lapply(
1:(length(covaxIncreaseMult)+2),
function (i) c(1, covaxIncreaseMult, 0)[i]*(if (i==1 | (i == 2 & scen.dt$doses_per_day == 4000)) doses_per_day else doses_per_day_later)
)
### NEW BIT IS HERE
fitS$par$schedule[[2]] = list(   # schedule[[2]] because schedule[[1]] is already occupied
parameter = 'v',             # impact parameter 'v' (vaccines administered per day for each age group)
pops = 0,                    # 0th population
mode = 'assign',             # assign values to v
times =     c(t_vax, covaxIncreaseDays, t_end) + scen.dt$vax_delay,    # do changes on vax day, vax day + 90
values = dpd
# however many doses a day for strategy_str days, then stop
)
} else {
dpd <- list(
doses_per_day, rep(0, length(doses_per_day))
)
tms <- c(t_vax, t_end) + scen.dt$vax_delay
if (scen.dt$from_age != 4) { #' if ! already targetting everybody
tswap <- floor((sum(fitS$par$pop[[1]]$size[tar_ages])*.75/scen.dt$doses_per_day)/30)*30
if (t_vax+tswap < t_end) {
dpd <- list(
doses_per_day, doses_per_day_later, rep(0, length(doses_per_day))
)
tms <- c(t_vax, t_vax+tswap, t_end) + scen.dt$vax_delay
}
}
fitS$par$schedule[[2]] = list(   # schedule[[2]] because schedule[[1]] is already occupied
parameter = 'v',             # impact parameter 'v' (vaccines administered per day for each age group)
pops = 0,                    # 0th population
mode = 'assign',             # assign values to v
times =     tms,    # do changes on vax day, vax day + 90
values = dpd
# however many doses a day for strategy_str days, then stop
)
}
}
lapply(fitS$par$processes, function(pr) sprintf("%s => [%s]", pr$source, paste(pr$names,pr$report,sep="_",collapse = ", ")))
res <- rbindlist(lapply(list.files("test", full.names = T), function(p) readRDS(p)[, id := as.integer(gsub("^.+/(\\d+)\\.rds$","\\1",p))]))
res[, unique(outcome)]
res[outcome == "death_o.1"]
scn <- readRDS("~/Dropbox/Covid-WHO-vax/inputs/config.rds")[id %in% res$id]
plot.dt <- res[scn, on=.(id)][, .(sampleId, group, t, outcome, value, id, vax_mech, eff_mech, from_age)]
base.dt <- plot.dt[is.na(vax_mech), .SD, .SDcols = -c("vax_mech", "eff_mech", "from_age", "id")]
dcp <- copy(base.dt[outcome == "death_o"])
dcp[, outcome := "death_o.1"][, value := 0.0 ]
base.dt <- rbind(base.dt, dcp)
res.dt <- plot.dt[!is.na(vax_mech)][base.dt, on=.(sampleId, group, t, outcome)][, .(
value = sum(value), i.value = sum(i.value), averted = sum(i.value-value)
), by=c(setdiff(names(plot.dt), c("value","group")))]
res.dt[order(t), c("cv","cv.i","ca") := .(cumsum(value), cumsum(i.value), cumsum(averted)), by=.(sampleId, id, outcome)]
require(ggplot2)
ggplot(res.dt[!(outcome %in% c("Ev","Sv"))]) +
aes(t, value, color = vax_mech, linetype = eff_mech, group = interaction(vax_mech, eff_mech, sampleId, outcome, from_age)) +
facet_grid(outcome ~ from_age, scales = "free_y") +
geom_line(alpha = 0.2) +
theme_minimal() +
scale_color_discrete(guide = guide_legend(override.aes = list(alpha = 1))) +
scale_linetype_discrete(guide = guide_legend(override.aes = list(alpha = 1)))
ggplot(res.dt[!(outcome %in% c("Ev","Sv")) & t > t_vax]) +
aes(t, value, color = vax_mech, linetype = eff_mech, group = interaction(vax_mech, eff_mech, sampleId, outcome, from_age)) +
facet_grid(outcome ~ from_age, scales = "free_y") +
geom_line(alpha = 0.2) +
theme_minimal() +
scale_color_discrete(guide = guide_legend(override.aes = list(alpha = 1))) +
scale_linetype_discrete(guide = guide_legend(override.aes = list(alpha = 1)))
ggplot(res.dt[!(outcome %in% c("Ev","Sv")) & t > t_vax]) +
aes(t, ca, color = vax_mech, linetype = eff_mech, group = interaction(vax_mech, eff_mech, sampleId, outcome, from_age)) +
facet_grid(outcome ~ from_age, scales = "free_y") +
geom_line(alpha = 0.2) +
theme_minimal() +
scale_color_discrete(guide = guide_legend(override.aes = list(alpha = 1))) +
scale_linetype_discrete(guide = guide_legend(override.aes = list(alpha = 1)))
ggplot(res.dt[(outcome %in% c("cases","death_o","death_o.1")) & t > t_vax]) +
aes(t, ca, color = vax_mech, linetype = eff_mech, group = interaction(vax_mech, eff_mech, sampleId, outcome, from_age)) +
facet_grid(outcome ~ from_age, scales = "free_y") +
geom_line(alpha = 0.2) +
theme_minimal() +
scale_color_discrete(guide = guide_legend(override.aes = list(alpha = 1))) +
scale_linetype_discrete(guide = guide_legend(override.aes = list(alpha = 1)))
ggplot(res.dt[(outcome %in% c("cases","death_o","death_o.1")) & t > t_vax]) +
aes(t, ca, color = vax_mech, linetype = eff_mech, group = interaction(vax_mech, eff_mech, sampleId, outcome, from_age)) +
facet_grid(outcome ~ from_age, scales = "free_y") +
geom_line(alpha = 0.2) +
theme_minimal() +
scale_color_discrete(guide = guide_legend(override.aes = list(alpha = 1))) +
scale_linetype_discrete(guide = guide_legend(override.aes = list(alpha = 1))) +
scale_y_log10() + coord_cartesian(ylim = c(1, NA))
ggplot(res.dt[(outcome %in% c("cases","death_o")) & t > t_vax]) +
aes(t, ca, color = vax_mech, linetype = eff_mech, group = interaction(vax_mech, eff_mech, sampleId, outcome, from_age)) +
facet_grid(outcome ~ from_age, scales = "free_y") +
geom_line(alpha = 0.2) +
theme_minimal() +
scale_color_discrete(guide = guide_legend(override.aes = list(alpha = 1))) +
scale_linetype_discrete(guide = guide_legend(override.aes = list(alpha = 1))) +
scale_y_log10()# + coord_cartesian(ylim = c(1, NA))
res <- rbindlist(lapply(list.files("test", full.names = T), function(p) readRDS(p)[, id := as.integer(gsub("^.+/(\\d+)\\.rds$","\\1",p))]))
res[,unique(outcome)]
scn <- readRDS("~/Dropbox/Covid-WHO-vax/inputs/config.rds")[id %in% res$id]
plot.dt <- res[scn, on=.(id)][, .(sampleId, group, t, outcome, value, id, vax_mech, eff_mech, from_age)]
base.dt <- plot.dt[is.na(vax_mech), .SD, .SDcols = -c("vax_mech", "eff_mech", "from_age", "id")]
dcp <- copy(base.dt[outcome == "death_o"])
dcp[, outcome := "death_o.1"][, value := 0.0 ]
base.dt <- rbind(base.dt, dcp)
res.dt <- plot.dt[!is.na(vax_mech)][base.dt, on=.(sampleId, group, t, outcome)][, .(
value = sum(value), i.value = sum(i.value), averted = sum(i.value-value)
), by=c(setdiff(names(plot.dt), c("value","group")))]
res.dt[order(t), c("cv","cv.i","ca") := .(cumsum(value), cumsum(i.value), cumsum(averted)), by=.(sampleId, id, outcome)]
require(ggplot2)
ggplot(res.dt[(outcome %in% c("cases","death_o")) & t > t_vax]) +
aes(t, ca, color = vax_mech, linetype = eff_mech, group = interaction(vax_mech, eff_mech, sampleId, outcome, from_age)) +
facet_grid(outcome ~ from_age, scales = "free_y") +
geom_line(alpha = 0.2) +
theme_minimal() +
scale_color_discrete(guide = guide_legend(override.aes = list(alpha = 1))) +
scale_linetype_discrete(guide = guide_legend(override.aes = list(alpha = 1))) +
scale_y_log10()# + coord_cartesian(ylim = c(1, NA))
ggplot(res.dt[t > t_vax]) +
aes(t, ca, color = vax_mech, linetype = eff_mech, group = interaction(vax_mech, eff_mech, sampleId, outcome, from_age)) +
facet_grid(outcome ~ from_age, scales = "free_y") +
geom_line(alpha = 0.2) +
theme_minimal() +
scale_color_discrete(guide = guide_legend(override.aes = list(alpha = 1))) +
scale_linetype_discrete(guide = guide_legend(override.aes = list(alpha = 1))) +
scale_y_log10()# + coord_cartesian(ylim = c(1, NA))
ggplot(res.dt[t > t_vax & !(outcome %in% c("E","Sv","Ev"))]) +
aes(t, ca, color = vax_mech, linetype = eff_mech, group = interaction(vax_mech, eff_mech, sampleId, outcome, from_age)) +
facet_grid(outcome ~ from_age, scales = "free_y") +
geom_line(alpha = 0.2) +
theme_minimal() +
scale_color_discrete(guide = guide_legend(override.aes = list(alpha = 1))) +
scale_linetype_discrete(guide = guide_legend(override.aes = list(alpha = 1))) +
scale_y_log10()# + coord_cartesian(ylim = c(1, NA))
res <- rbindlist(lapply(list.files("test", full.names = T), function(p) readRDS(p)[, id := as.integer(gsub("^.+/(\\d+)\\.rds$","\\1",p))]))
scn <- readRDS("~/Dropbox/Covid-WHO-vax/inputs/config.rds")[id %in% res$id]
plot.dt <- res[scn, on=.(id)][, .(sampleId, group, t, outcome, value, id, vax_mech, eff_mech, from_age)]
base.dt <- plot.dt[is.na(vax_mech), .SD, .SDcols = -c("vax_mech", "eff_mech", "from_age", "id")]
# dcp <- copy(base.dt[outcome == "death_o"])
# dcp[, outcome := "death_o.1"][, value := 0.0 ]
# base.dt <- rbind(base.dt, dcp)
res.dt <- plot.dt[!is.na(vax_mech)][base.dt, on=.(sampleId, group, t, outcome)][, .(
value = sum(value), i.value = sum(i.value), averted = sum(i.value-value)
), by=c(setdiff(names(plot.dt), c("value","group")))]
res.dt[order(t), c("cv","cv.i","ca") := .(cumsum(value), cumsum(i.value), cumsum(averted)), by=.(sampleId, id, outcome)]
require(ggplot2)
ggplot(res.dt[t > t_vax & !(outcome %in% c("E","Sv","Ev"))]) +
aes(t, ca, color = vax_mech, linetype = eff_mech, group = interaction(vax_mech, eff_mech, sampleId, outcome, from_age)) +
facet_grid(outcome ~ from_age, scales = "free_y") +
geom_line(alpha = 0.2) +
theme_minimal() +
scale_color_discrete(guide = guide_legend(override.aes = list(alpha = 1))) +
scale_linetype_discrete(guide = guide_legend(override.aes = list(alpha = 1))) +
scale_y_log10()# + coord_cartesian(ylim = c(1, NA))
ggplot(res.dt[t > 800 & !(outcome %in% c("E","Sv","Ev"))]) +
aes(t, ca, color = vax_mech, linetype = eff_mech, group = interaction(vax_mech, eff_mech, sampleId, outcome, from_age)) +
facet_grid(outcome ~ from_age, scales = "free_y") +
geom_line(alpha = 0.2) +
theme_minimal() +
scale_color_discrete(guide = guide_legend(override.aes = list(alpha = 1))) +
scale_linetype_discrete(guide = guide_legend(override.aes = list(alpha = 1))) +
scale_y_log10()# + coord_cartesian(ylim = c(1, NA))
ggplot(res.dt[t > 800 & !(outcome %in% c("E","Sv","Ev"))]) +
aes(t, ca, color = vax_mech, linetype = eff_mech, group = interaction(vax_mech, eff_mech, sampleId, outcome, from_age)) +
facet_grid(outcome ~ from_age, scales = "free_y") +
geom_line(alpha = 0.2) +
theme_minimal() +
scale_color_discrete(guide = guide_legend(override.aes = list(alpha = 1))) +
scale_linetype_discrete(guide = guide_legend(override.aes = list(alpha = 1))) +
scale_y_log10() + coord_cartesian(expand = F)
res <- rbindlist(lapply(list.files("test", full.names = T), function(p) readRDS(p)[, id := as.integer(gsub("^.+/(\\d+)\\.rds$","\\1",p))]))
scn <- readRDS("~/Dropbox/Covid-WHO-vax/inputs/config.rds")[id %in% res$id]
plot.dt <- res[scn, on=.(id)][, .(sampleId, group, t, outcome, value, id, vax_mech, eff_mech, from_age)]
base.dt <- plot.dt[is.na(vax_mech), .SD, .SDcols = -c("vax_mech", "eff_mech", "from_age", "id")]
# dcp <- copy(base.dt[outcome == "death_o"])
# dcp[, outcome := "death_o.1"][, value := 0.0 ]
# base.dt <- rbind(base.dt, dcp)
res.dt <- plot.dt[!is.na(vax_mech)][base.dt, on=.(sampleId, group, t, outcome)][, .(
value = sum(value), i.value = sum(i.value), averted = sum(i.value-value)
), by=c(setdiff(names(plot.dt), c("value","group")))]
res.dt[order(t), c("cv","cv.i","ca") := .(cumsum(value), cumsum(i.value), cumsum(averted)), by=.(sampleId, id, outcome)]
require(ggplot2)
ggplot(res.dt[t > 800 & !(outcome %in% c("E","Sv","Ev"))]) +
aes(t, ca, color = vax_mech, linetype = eff_mech, group = interaction(vax_mech, eff_mech, sampleId, outcome, from_age)) +
facet_grid(outcome ~ from_age, scales = "free_y") +
geom_line(alpha = 0.2) +
theme_minimal() +
scale_color_discrete(guide = guide_legend(override.aes = list(alpha = 1))) +
scale_linetype_discrete(guide = guide_legend(override.aes = list(alpha = 1))) +
scale_y_log10() + coord_cartesian(expand = F)
res.dt[from_age == 14 & t == 815 & outcome == "cases"]
res.dt[from_age == 14 & t == 815 & outcome == "cases" & sampleId == 1]
res.dt[from_age == 14 & t == 815 & outcome == "cases" & sampleId == 2]
res.dt[from_age == 14 & t == 815 & outcome == "cases" & sampleId == 3]
